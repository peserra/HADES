#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

struct Item
{
  float chave;
  int contador;
  struct Item *proximo;
};

struct Lista
{
  struct Item *inicio;
};
struct Lista *criaLista();
struct Item *criaItem(float);
struct Item *remover(struct Lista *, float);
struct Item *buscar(struct Lista *, float);
void create_csv(FILE *, char *);
void recebe_cnpj(char *);
int Analise(char, int, float, float, float, int, int);
float *cadastro(char *, char *, float *, int *, char *, float *, int *, float *, float *, int *, int *);
char *classificacao(int);
void GeraExtrato(char *, float, char *, float *, float *, char *, char *, int);
int new_analise(FILE *dados);
void inserir(struct Lista *, struct Item *);
int mostrar(struct Lista *);
void desalocar(struct Lista *);
float *add_transacao(float *);
float *create_vector(struct Lista *, int, float *);
void write_csv(char *, char *, char *, char *, int, float, int, float, float *, int, FILE *);
char *transform_to_string(float *, int);
int soma_transacoes(float *, int);
void flush_in();

void flush_in()
{
  int ch;
  while ((ch = fgetc(stdin)) != EOF && ch != '\n')
  {
  }
}
float *create_vector(struct Lista *transacoes, int contador, float *vector)
{
  struct Item *it = transacoes->inicio;
  vector = (float *)(malloc(contador * sizeof(float)));
  int index = 0;
  while (it != NULL)
  {
    vector[index] = it->chave;
    it = it->proximo;
    index++;
  }
  return vector;
}
float *add_transacao(float *vector)
{

  struct Lista *transacoes = criaLista();
  struct Item *it;
  float chave;
  int contador;
  char op;
  while (scanf("\n%c", &op) != EOF)
  {
    if (op == 'I')
    {
      scanf("%f", &chave);
      inserir(transacoes, criaItem(chave));
    }
    else if (op == 'R')
    {
      scanf("%f", &chave);
      it = remover(transacoes, chave);
    }
    else
    {
      printf("\nAs transacoes realizadas pelo cliente são:\n");
      contador = mostrar(transacoes);
      return create_vector(transacoes, contador, vector);
    }
  }
  return 0;
}

struct Lista *criaLista()
{
  struct Lista *l = (struct Lista *)malloc(sizeof(struct Lista));
  if (l != NULL)
  {
    l->inicio = NULL;
  }
  return l;
}

struct Item *criaItem(float chave)
{
  struct Item *it = (struct Item *)malloc(sizeof(struct Item));
  if (it != NULL)
  {
    it->chave = chave;
    it->proximo = NULL;
  }
  return it;
}

void inserir(struct Lista *l, struct Item *novo)
{
  struct Item *anterior = NULL, *atual = l->inicio;
  float achei = 0;
  while (atual != NULL && !achei)
  {
    if (atual->chave > novo->chave)
    {
      achei = 1;
    }
    else
    {
      anterior = atual;
      atual = atual->proximo;
    }
  }
  if (anterior == NULL)
  {
    l->inicio = novo;
  }
  else
  {
    anterior->proximo = novo;
  }
  novo->proximo = atual;
}
struct Item *remover(struct Lista *l, float chave)
{
  struct Item *anterior = NULL, *atual = l->inicio;
  while (atual != NULL && atual->chave < chave)
  {
    anterior = atual;
    atual = atual->proximo;
  }
  if (atual != NULL)
  {
    if (atual->chave == chave)
    {
      if (anterior == NULL)
      {
        l->inicio = atual->proximo;
      }
      else
      {
        anterior->proximo = atual->proximo;
      }
    }
    else
    {
      atual = NULL;
    }
  }
  return atual;
}

int mostrar(struct Lista *l)
{
  struct Item *it = l->inicio;
  int contador = 0;
  while (it != NULL)
  {
    printf("%.2f%s", it->chave, it->proximo != NULL ? " " : "\n");
    it = it->proximo;
  }
  return contador;
}
void desalocar(struct Lista *l)
{
  struct Item *it = l->inicio, *proximo;
  while (it != NULL)
  {
    proximo = it->proximo;
    free(it);
    it = proximo;
  }
  free(l);
}

void recebe_cnpj(char *cnpj)
{
  printf("\nDigite o seu cnpj: ");
  scanf("%s", cnpj);
  fflush(stdin);
  printf("%s", strlen(cnpj) == 14 ? "Numeração correta, vamos prosseguir com o processo.\n" : "Insira um CNPJ válido\n");
  if (strlen(cnpj) != 14)
  {
    recebe_cnpj(cnpj);
  }
}
int Analise(char risco, int paraiso, float somamesanterior, float transacoestotal, float faturamento, int transmedia, int linha)
{
  int ponto = 0; /*Pontuacao que sera retornada*/
  /*Analise Risco*/
  if ((risco == 'a' || risco == 'A') && (transacoestotal > somamesanterior + (somamesanterior * 0.1)))
  {
    ponto++;
  }
  else if ((risco == 'm' || risco == 'M') && (transacoestotal > somamesanterior + (somamesanterior * 0.15)))
  {
    ponto++;
  }
  else if ((risco == 'b' || risco == 'B') && (transacoestotal > somamesanterior + (somamesanterior * 0.2)))
  {
    ponto++;
  }
  /*Analise Paraiso*/
  if (paraiso == 1)
  {
    if (transacoestotal > 0)
    {
      ponto++;
    }
    else
    {
      printf("O cliente reside no paraíso fiscal, porém não houve movimentação.\n");
    }
  }
  /*Analise Faturamento*/
  if (transacoestotal > faturamento)
  {
    ponto++;
  }
  /*Analise Quantidade de Transcoes*/
  if (linha > transmedia)
  {
    ponto++;
  }
  printf("ponto = %d\n\n", ponto);
  return ponto;
}

/*Funcao Cadastro*/

float *cadastro(char nome[], char *cnpj, float *faturamento, int *paraiso, char *risco, float *transacoes, int *transmedia, float *transacoestotal, float *somamesanterior, int *somap, int *size)
{
  printf("\n=======================================\n======== Cadastro do cliente. +========\n=======================================\n\n");
  int i;
  int aux = 0;
  /*nome*/
  flush_in();
  printf("Digite o nome do cliente: ");
  scanf("%[A-Z a-z]", nome);
  /*Cnpj*/
  recebe_cnpj(cnpj);
  /*faturamento mensal*/
  printf("\nDigite o faturamento mensal do cliente(em R$) : ");
  scanf("%f", faturamento);

  /*risco*/
  int contrisco = 0;
  while (contrisco == 0)
  {
    printf("\nDigite o risco do cliente (A - alto, M - medio ou B - baixo): ");
    scanf("%s", risco);

    switch (*risco)
    {
    case 'A':
      printf("Risco: Alto\n");
      contrisco++;
      break;

    case 'a':
      printf("Risco: Alto\n");
      contrisco++;
      break;

    case 'M':
      printf("Risco: Médio\n");
      contrisco++;
      break;

    case 'm':
      printf("Risco: Médio\n");
      contrisco++;
      break;

    case 'B':
      printf("Risco: Baixo\n");
      contrisco++;
      break;

    case 'b':
      printf("Risco: Baixo\n");
      contrisco++;
      break;

    default:
      printf("Digite um risco válido");
    }
  }
  /*transações do mês*/
  printf("\nEscreva I para incluir e R para remover os valores da lista. Exemplo: I 50 (inclui o valor 50)\nDigite as transações do mês atual(em R$):  \n");
  transacoes = add_transacao(transacoes);
  printf("\nDigite o número médio de transações por mês que o cliente efetua: ");
  scanf("%d", transmedia);
  /*número médio de transações*/
  printf("\nDigite quanto foi movimentado no mês anterior(em R$) : ");
  scanf("%f", somamesanterior);

  /*paraíso fiscal*/
  printf("\nO cliente reside em paraíso fiscal ? (1 para sim, 0 para não): ");
  scanf("%d", paraiso);

  /*Verificando se o paraiso digitado é valido*/
  while (*paraiso != 1 && *paraiso != 0)
  {
    printf("\nDigite um paraíso válido: ");
    scanf("%d", paraiso);
    flush_in();
  }
  for (int i = 0; transacoes[i] != '\0'; i++)
  {
    *size += 1;
  }
  *transacoestotal = soma_transacoes(transacoes, *size);
  *somap = Analise(*risco, *paraiso, *somamesanterior, *transacoestotal, *faturamento, *transmedia, *size);
  return transacoes;
}
/*------------------- fim da função cadastro/análise --------------------------*/
/*Funcao Classificacao*/

char *classificacao(int pontos)
{
  if (pontos > 0 && pontos <= 2)
  {
    return "Alpha";
  }
  if (pontos >= 3)
  {
    return "Omega";
  }
  else
  {
    return "NAO EH UM ALERTA";
  }
}

int soma_transacoes(float *transacoes, int n)
{
  if (n == 1)
  {
    return transacoes[0];
  }
  return transacoes[n - 1] + soma_transacoes(transacoes, n - 1);
}
void GeraExtrato(char *nome, float faturamento, char *risco, float *transacoestotal, float *transacoes, char *tipoalerta, char *cnpj, int size)
{
  printf("\n====================================\n======== Geracao de extrato da analise. =====\n=======================================\n\n");
  FILE *fp;
  int comp;
  float media = 0, somat;
  char vazio[16] = "NAO EH UM ALERTA";
  comp = strcmp(tipoalerta, vazio);
  if (*risco == 'a' || *risco == 'A')
  {
    risco = "Alto";
  }
  else if (*risco == 'm' || *risco == 'M')
  {
    risco = "Médio";
  }
  else if (*risco == 'b' || *risco == 'B')
  {
    risco = "Baixo";
  }
  if (comp == 0)
  {
    printf("O sistema H.A.D.E.S. não encontrou nenhuma inconsistência nas movimentações analisadas\n");
  }
  else
  {
    int mqm = 0;
    printf("\n\n-------//----------- Extrato Bancário----------//--------------\n\n");
    printf("Nome do cliente: %s   Risco: %s\n\n", nome, risco);
    printf("CNPJ:  %s                         Tipo do Alerta: %s \n\n", cnpj, tipoalerta);
    printf("----//--------Movimentações do cliente -------//-----------\n\n");
    for (int i = 0; i < size; i++)
    {
      printf("R$ %.2f ;%s", *(transacoes + i), i < size - 1 ? " " : "\n");
    }
    float media = (float)*transacoestotal / size;
    for (int i = 0; transacoes[i] != '\0'; i++)
    {
      if (transacoes[i] > media)
      {
        mqm++;
      }
    }
    printf("\n\nSoma: R$ %.2f                média de transações: R$ %.2f", *transacoestotal, media);
    printf("\nMaior Transação: R$ %.2f      Transações superiores que a média: %d\n\n", transacoes[size - 1], mqm);
    printf("\n\n-------------//----------- Fim ----------//----------------------\n\n");
  }
}
int new_analise(FILE *dados)
{
  // declaração de variáveis
  char *nome, *risco, cont[1], *cnpj;
  nome = (char *)(malloc(100 * sizeof(char)));
  cnpj = (char *)(malloc(22 * sizeof(char)));
  char *tipoalerta;
  int somap, size = 0;
  float faturamento, *transacoes, *transcoesant, transacoestotal, somamesanterior;
  transcoesant = (float *)(malloc(10 * sizeof(float *)));
  int transmedia, paraiso, i;

  // chamda das função do HADES
  transacoes = cadastro(nome, cnpj, &faturamento, &paraiso, risco, transacoes, &transmedia, &transacoestotal, &somamesanterior, &somap, &size);
  tipoalerta = classificacao(somap);
  GeraExtrato(nome, faturamento, risco, &transacoestotal, transacoes, tipoalerta, cnpj, size);
  write_csv(nome, cnpj, tipoalerta, risco, paraiso, faturamento, transmedia, somamesanterior, transacoes, size, dados);
  return 0;
}
void write_csv(char *nome, char *cnpj, char *tipoalerta, char *risco, int paraiso, float faturamento, int transmedia, float mesanterior, float *transacoes, int size, FILE *dados)
{
  char *paradise;
  if (paraiso == 1)
  {
    paradise = "Sim";
  }
  else
  {
    paradise = "Nao";
  }
  fprintf(dados, "\r%s;%s;%s;%s,%s;%.2f;%d;%.2f;%d;%s\r", cnpj, nome, tipoalerta, risco, paradise, faturamento, transmedia, mesanterior, size, transform_to_string(transacoes, size));
  fclose(dados);
  exit(1);
}
char *transform_to_string(float *transacoes, int size)
{
  char *value, *string;
  value = (char *)(malloc((30 * sizeof(char))));
  sprintf(value, "%.2f", transacoes[size - 1]);
  int tamanho = strlen(value);
  string = (char *)(malloc(((tamanho + 3) * size) * sizeof(char)));
  for (int i = 0; i < size; i++)
  {
    sprintf(value, "%.2f", transacoes[i]);
    strcat(string, value);
    strcat(string, i < size - 1 ? ";" : "");
  }
  return string;
}
void create_csv(FILE *dados, char *path)
{
  dados = fopen(path, "w");
  if (dados == NULL)
  {
    printf("\nErro ao abrir o arquivo. Verifique se o sistema possui permissão de criação ou se há espaço em disco suficiente. Infelizmente a operação de busca será cancelada\n");
  }
  else
  {
    fprintf(dados, "%s", "CNPJ;Nome;Tipo_alerta;Risco;Paraiso_fiscal;Faturamento_mensal;Media_transacoes_mensal;Movimentacao_mes_anterior;Numero_transacoes_realizadas;Transacoes_realizadas");
    printf("\nArquivo %s criado com sucesso!\n\nCertifique-se que o cabeçalho do arquivo foi gerado conforme o planejado\n", path);
    fclose(dados);
  }
}
void menu(FILE *dados)
{
  int operation;
  printf("\n=======================================\n=========== Menu de opcoes. ===========\n=======================================\n\n");
  printf("\nArquivo encontrado.\n[1] Realizar e armazenar uma nova análise\n[2]Gerar lista de cadastrados(Você será questionado sobre isso novamente caso queira realizar outra operação antes)\n[3] Sair\nDigite o número correspondente a operação que quer realizar: ");
  scanf("%d", &operation);
  if (operation == 1)
  {
    new_analise(dados);
  }
  else if (operation == 3)
    exit(1);
}
int main()
{
  char operator_to_create, *file_path, *path;
  int operation, bd;
  FILE *dados;
  // primeira interação com o usuário
  printf("\n=======================================\n======== Validacao do arquivo. ========\n=======================================\n\n");
  printf("Olá Usuário, Bem vindo ao sistema H.A.D.E.S. de monitoramento de ações e transações ilícitas. Insira abaixo os dados requisitados para análise.\n\n");
  printf("\nDigite o nome do arquivo.\n");
  scanf("\n%s", file_path);
  path = strcat(file_path, ".csv");
  dados = fopen(path, "r+");
  if (dados == NULL)
  {
    printf("\nErro ao abrir o arquivo. Arquvivo não encontrado. Você deseja que o sistema crie o arquivo? [S/n]\n");
    scanf("\n%c", &operator_to_create);
    if (operator_to_create == 'S' || operator_to_create == 's')
    {
      create_csv(dados, path);
      dados = fopen(path, "a+");
      menu(dados);
    }
    else
    {
      printf("Operacao cancelada\n");
      return 0;
    }
  }
  else
  {
    dados = fopen(path, "a+");
    menu(dados);
  }
  printf("\nDeseja Imprimir o banco de dados atual? 1-sim , 0-não\n");
  flush_in();
  scanf("%d", &bd);
  if (bd == 1)
  {
    char c;
    while ((c = fgetc(dados)) != EOF)
    {
      printf("%c", c);
    }
  }
  else
  {
    printf("\nO Sistema H.A.D.E.S. está encerrando agora\n");

    return 0;
  }

  fclose(dados);
  printf("\nO Sistema H.A.D.E.S. está encerrando agora\n");

  return 0;
}